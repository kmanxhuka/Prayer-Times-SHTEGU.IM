/** https://core.telegram.org/bots/api#markdown-style */
export const parse_mode = "Markdown";
/** Escape the input text to be displayed as it is */
export function escape(text) {
    return text.replace(/[*_`[\]()]/g, "");
}
/** Format the input text bold */
export function bold(text) {
    return `*${text.replace(/\*/g, "")}*`;
}
/** Format the input text italic */
export function italic(text) {
    return `_${text.replace(/_/g, "")}_`;
}
/** unsupported by Telegram. Use MarkdownV2 or HTML instead @deprecated */
export function strikethrough(_text) {
    throw new Error("strikethrough is not supported by Markdown. Use MarkdownV2 instead.");
}
/** unsupported by Telegram. Use MarkdownV2 or HTML instead @deprecated */
export function underline(_text) {
    throw new Error("underline is not supported by Markdown. Use MarkdownV2 instead.");
}
/** unsupported by Telegram. Use MarkdownV2 or HTML instead @deprecated */
export function blockquote(_text) {
    throw new Error("blockquote is not supported by Markdown. Use MarkdownV2 instead.");
}
/** unsupported by Telegram. Use MarkdownV2 or HTML instead @deprecated */
export function spoiler(_text) {
    throw new Error("spoiler is not supported by Markdown. Use MarkdownV2 instead.");
}
/** unsupported by Telegram. Use MarkdownV2 or HTML instead @deprecated */
export function tgEmoji(_fallback, _emojiId) {
    throw new Error("tgEmoji is not supported by Markdown. Use MarkdownV2 instead.");
}
/** Format the input text as monospace */
export function monospace(text) {
    return "`" + text.replace(/`/g, "") + "`";
}
/** Format the input text as a monospace block optionally with a programming language */
export function monospaceBlock(text, programmingLanguage) {
    let result = "";
    result += "```";
    if (programmingLanguage) {
        result += programmingLanguage;
    }
    result += "\n";
    result += text.replace(/```/g, "");
    result += "\n";
    result += "```";
    return result;
}
/** Create an url with a label text */
export function url(label, url) {
    return `[${label.replace(/]/, "")}](${url.replace(/\)/, "")})`;
}
/** Create a user mention with a label text */
export function userMention(label, userId) {
    return url(label, `tg://user?id=${userId}`);
}
